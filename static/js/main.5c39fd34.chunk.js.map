{"version":3,"sources":["InfoBox.js","LineGraph.js","util.js","Map.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","numCases","isRed","active","totalCases","props","Card","onClick","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","chartData","date","cases","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","Map","countries","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","res","name","iso2","getCountries","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","e","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c39fd34.chunk.js","sourcesContent":["import React from 'react'\nimport {Card, CardContent, Typography} from '@material-ui/core'\nimport './Infobox.css'\n\nfunction InfoBox({title,numCases, isRed, active,totalCases, ...props}) {\n    return (\n        <Card onClick={props.onClick}   \n            className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\n            <CardContent>\n                <Typography className='infobox__title' color = 'textSecondary'>\n                    {title}\n                </Typography>\n                <h2 className={`infoBox__cases ${!isRed && 'infobox__cases--green'}`}>\n                {numCases}</h2>\n                <Typography className='infobox__total' color = 'textSecondary'>\n                    {totalCases} Total\n                </Typography>                                \n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React, {useState, useEffect} from 'react'\nimport {Line} from 'react-chartjs-2'\nimport numeral from 'numeral'\n\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n\nconst buildChartData = (data,casesType='cases') => {\n    const chartData = []\n    let lastDataPoint\n    for(let date in data.cases) {\n        if (lastDataPoint) {\n            const newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint,\n            }\n            chartData.push(newDataPoint)                \n        }\n        lastDataPoint = data[casesType][date]\n    }\n    return chartData\n}\n\nfunction LineGraph({ casesType = 'cases' }) {    \n    const [data, setData] = useState({})\n    useEffect(() => {\n        const fetchData = async () => {\n          await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n            .then((response) => response.json() )\n            .then((data) => {\n              let chartData = buildChartData(data, casesType);\n              setData(chartData);              \n            });\n        };\n    \n        fetchData();\n      }, [casesType]);\n\n    return (\n        <div>\n            {data?.length > 0 && (\n                <Line\n                data={{\n                    datasets: [\n                    {\n                        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                        borderColor: \"#CC1034\",\n                        data: data,\n                    },\n                    ],\n                }}\n                options={options}\n                />\n            )}            \n        </div>\n    )\n}\n\nexport default LineGraph\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      rgb: \"rgb(204, 16, 52)\",\n      half_op: \"rgba(204, 16, 52, 0.5)\",\n      multiplier: 800,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      rgb: \"rgb(125, 215, 29)\",\n      half_op: \"rgba(125, 215, 29, 0.5)\",\n      multiplier: 1200,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      rgb: \"rgb(251, 68, 67)\",\n      half_op: \"rgba(251, 68, 67, 0.5)\",\n      multiplier: 2000,\n    },\n  };\n\nexport const sortData = (data) => {\n    const sortedData = [...data]\n    sortedData.sort((a,b) => {\n        if(a.cases > b.cases) {\n            return -1 \n        } else {\n            return 1\n        }\n    })\n    return sortedData   \n}\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\ndata.map((country) => (\n    <Circle\n        center={[country.countryInfo.lat, country.countryInfo.long]}\n        color={casesTypeColors[casesType].hex}\n        fillColor={casesTypeColors[casesType].hex}\n        fillOpacity={0.4}\n        radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n        }\n    >\n        <Popup>\n            <div className=\"info-container\">\n                <div className=\"info-flag\"\n                style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                ></div>\n                <div className=\"info-name\">{country.country}</div>\n                <div className=\"info-confirmed\">\n                Cases: {numeral(country.cases).format(\"0,0\")}\n                </div>                \n                <div className=\"info-recovered\">\n                Recovered: {numeral(country.recovered).format(\"0,0\")}\n                </div>\n                <div className=\"info-deaths\">\n                Deaths: {numeral(country.deaths).format(\"0,0\")}\n                </div>\n            </div>\n        </Popup>\n    </Circle>\n))\n\nexport const prettyPrintStat = (stat) => \n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\"","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;","import React from 'react'\nimport './Table.css'\nimport numeral from 'numeral'\n\nfunction Table({countries}) {\n    return (\n        <div className='table'>\n            {countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td>\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\n                    </td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React, {useState, useEffect} from 'react';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from '@material-ui/core'\nimport './App.css';\nimport Infobox from './InfoBox'\nimport LineGraph from './LineGraph'\nimport Map from './Map'\nimport { sortData, prettyPrintStat } from './util'\nimport Table from './Table'\nimport 'leaflet/dist/leaflet.css'\n // https://disease.sh/v3/covid-19/all\n // https://disease.sh/v3/covid-19/countries\n // https://disease.sh/v3/covid-19/countries/[Country_code]\n\nfunction App() {  \n  const [countries, setCountries] = useState([])\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState({lat:34.80746,lng:-40.4796})\n  const [mapZoom, setMapZoom] = useState(3)\n  const [mapCountries, setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState('cases')\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(res => res.json())\n    .then(data => {\n      setCountryInfo(data);\n    })\n  },[])\n\n  useEffect(() => {\n    const getCountries = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) =>({\n          name:country.country,\n          value:country.countryInfo.iso2,\n        }))\n        const sortedData = sortData(data)\n        setTableData(sortedData)\n        setMapCountries(data)\n        setCountries(countries)\n      })\n    }\n    getCountries()\n  },[])\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value\n    setCountry(countryCode)\n    const url = countryCode === 'worldwide' ? \n      'https://disease.sh/v3/covid-19/all' :\n      `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then(res => res.json())\n    .then((data) => {\n      setCountry(countryCode)\n      setCountryInfo(data)\n      setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n      setMapZoom(4)\n    })\n\n  }\n\n  return (\n    <div className=\"app\">\n      <div className='app__left'>\n        <div className='app__header'>\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className='app__dropdown'>\n            <Select variant='outlined' onChange={onCountryChange} value={country}>\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {countries.map((country) => ( \n                <MenuItem value={country.value}>{country.name}</MenuItem>                              \n                ))}                       \n            </Select>\n          </FormControl>\n        </div>\n        <div className='app__stats'>\n          <Infobox title='Covid-19 cases' numCases={prettyPrintStat(countryInfo.todayCases)} \n            totalCases={prettyPrintStat(countryInfo.cases)} isRed\n            onClick={e => setCasesType('cases')} active={casesType === 'cases'}\n          />              \n          <Infobox title='Recovered' numCases={prettyPrintStat(countryInfo.todayRecovered)} \n            totalCases={prettyPrintStat(countryInfo.recovered)} \n            onClick={e => setCasesType('recovered')} active={casesType === 'recovered'}\n          />              \n          <Infobox title='Deaths' numCases={prettyPrintStat(countryInfo.todayDeaths)} \n            totalCases={prettyPrintStat(countryInfo.deaths)} isRed\n            onClick={e => setCasesType('deaths')} active={casesType === 'deaths'}\n          />                          \n        </div>\n        <Map center={mapCenter} zoom={mapZoom} countries={mapCountries} casesType={casesType} />\n      </div>\n        \n      <Card className='app__right'>\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData} />\n          <h3>World wide new {casesType}</h3>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n    \n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}